 


// REPROJECTING STUDY AREA
var transformer = function(a_feature){
  var transformed_feature = a_feature.transform(PROJ, 0.001);
  return transformed_feature;
};
var PROJ = 'EPSG:3857';

var CB_prj    = ee.FeatureCollection('users/BasBoek90/Congo_Basin').map(transformer);



    ////////////////////////////////
    // ZONAL STATISTICS FUNCTIONS //
    ////////////////////////////////

//////// EXPORT, NO ZONALS //////// 
var export_img = function(IMG, NAME, REGION){
  var ExportTableTask = Export.image.toDrive({
    image       : IMG,
    scale       : 250,
    description : NAME,
    folder      : 'CongoBasin_250m',
    fileFormat  : 'GeoTIFF',
    region      : REGION,
    maxPixels   : 200000000 
  });
  return ExportTableTask;
};


//////// CALCULATE COVER NON_NA VALUES //////// 
var calculate_total_cover = function(IMG_INPUT, OUT_NAME, FACTOR) {
  
  var zonal_stats = IMG_INPUT.gt(-9999999999).float()
    .reduceResolution({
      reducer: ee.Reducer.sum(),
      maxPixels: 10000
  }).reproject({
      crs: PROJ,
      scale: 250
  }).multiply(FACTOR).round().toInt16().rename([String(OUT_NAME)]);

 // export_img(zonal_stats, OUT_NAME);

  return zonal_stats;

};


//////// CALCULATE COVER //////// 
var calculate_cover = function(IMG_INPUT, PIX_VALUE, OUT_NAME, FACTOR) {
  
  var zonal_stats = IMG_INPUT.eq(PIX_VALUE).float().unmask(0)
    .reduceResolution({
      reducer: ee.Reducer.mean(),
      maxPixels: 10000
  }).reproject({
      crs: PROJ,
      scale: 250
  }).multiply(FACTOR).round().toInt16().rename([OUT_NAME + '_' + String(PIX_VALUE)]);

//  export_img(zonal_stats, OUT_NAME + '_' + String(PIX_VALUE), CB_prj);
  
  return zonal_stats;

};

//////// CALCULATE MEAN //////// 
var calculate_avg = function(IMG_INPUT, BAND_NAME, OUT_NAME, FACTOR) {
  
  var zonal_stats = IMG_INPUT.select(BAND_NAME)
    .reduceResolution({
      reducer: ee.Reducer.mean(),
      maxPixels: 65535
  }).reproject({
      crs: PROJ,
      scale: 250
  }).multiply(parseInt(FACTOR)).round().toInt16().rename([BAND_NAME + '_' + OUT_NAME]);
  
 // export_img(zonal_stats, String(BAND_NAME) + '_' + OUT_NAME);

  return zonal_stats;

};

//////// CALCULATE MEAN WITH RESOLUTION //////// 
var calculate_avg_res = function(IMG_INPUT, BAND_NAME, OUT_NAME, RES, FACTOR) {
  
  var zonal_stats = IMG_INPUT.select(BAND_NAME)
    .reduceResolution({
      reducer: ee.Reducer.mean(),
      maxPixels: 65535
  }).reproject({
      crs: PROJ,
      scale: RES
  }).multiply(parseInt(FACTOR)).round().toInt16().rename([BAND_NAME]);
  
  return zonal_stats;

};



//////// CALCULATE SD //////// 
var calculate_std = function(IMG_INPUT, BAND_NAME, OUT_NAME, FACTOR) {
  
  var zonal_stats = IMG_INPUT.select(BAND_NAME)
    .reduceResolution({
      reducer: ee.Reducer.variance(),
      maxPixels: 10000
  }).reproject({
      crs: PROJ,
      scale: 250
  }).sqrt().multiply(FACTOR).round().toInt16().rename([BAND_NAME + '_' + OUT_NAME]);
  
  // export_img(zonal_stats, String(BAND_NAME) + '_' + OUT_NAME, CB_prj);

  return zonal_stats;

};


    //////////////
    /// EXPORT ///
    //////////////


//// Worldclim variables
var worldclim = ee.Image('WORLDCLIM/V1/BIO');

var v01 = calculate_avg(worldclim, 'bio01', 'Worldclim', 1); // Annual mean temperature (°C)
var v02 = calculate_avg(worldclim, 'bio02', 'Worldclim', 1); // Mean diurnal range (mean of monthly (max temp - min temp)) (°C)
var v03 = calculate_avg(worldclim, 'bio03', 'Worldclim', 1); // Isothermality (bio02/bio07) (%)
var v04 = calculate_avg(worldclim, 'bio04', 'Worldclim', 1); // Temperature seasonality (Standard deviation * 100) (°C)
var v05 = calculate_avg(worldclim, 'bio05', 'Worldclim', 1); // Max temperature of warmest month (°C)
var v06 = calculate_avg(worldclim, 'bio06', 'Worldclim', 1); // Min temperature of coldest month (°C)
var v07 = calculate_avg(worldclim, 'bio07', 'Worldclim', 1); // Temperature annual range (bio05-bio06) (°C)
var v08 = calculate_avg(worldclim, 'bio08', 'Worldclim', 1); // Mean temperature of wettest quarter (°C)
var v09 = calculate_avg(worldclim, 'bio09', 'Worldclim', 1); // Mean temperature of driest quarter (°C)
var v10 = calculate_avg(worldclim, 'bio10', 'Worldclim', 1); // Mean temperature of warmest quarter (°C)
var v11 = calculate_avg(worldclim, 'bio11', 'Worldclim', 1); // Mean temperature of coldest quarter (°C)
var v12 = calculate_avg(worldclim, 'bio12', 'Worldclim', 1); // Annual precipitation (mm)
var v13 = calculate_avg(worldclim, 'bio13', 'Worldclim', 1); // Precipitation of wettest month (mm)
var v14 = calculate_avg(worldclim, 'bio14', 'Worldclim', 1); // Precipitation of driest month (mm)
var v15 = calculate_avg(worldclim, 'bio15', 'Worldclim', 1); // Precipitation seasonality (CoV)
var v16 = calculate_avg(worldclim, 'bio16', 'Worldclim', 1); // Precipitation of wettest quarter (mm)
var v17 = calculate_avg(worldclim, 'bio17', 'Worldclim', 1); // Precipitation of driest quarter (mm)
var v18 = calculate_avg(worldclim, 'bio18', 'Worldclim', 1); // Precipitation of warmest quarter (mm)
var v19 = calculate_avg(worldclim, 'bio19', 'Worldclim', 1); // Precipitation of coldest quarter (mm)

//Map.addLayer(worldclim.select('bio12').clip(CB_prj), {min: 1250, max: 3000, bands: 'bio12'});

//// Tropical Moist Forest: Types of events
var TransitionMap      = ee.ImageCollection('projects/JRC/TMF/v1_2020/TransitionMap_Subtypes').mosaic(); // subtypes
var TransitionMap_Main = TransitionMap.where((TransitionMap.gte(10)).and(TransitionMap.lte(12)), 10);

TransitionMap_Main = TransitionMap_Main.where((TransitionMap.gte(21)).and(TransitionMap.lte(26)), 20);
TransitionMap_Main = TransitionMap_Main.where((TransitionMap.gte(61)).and(TransitionMap.lte(62)), 20);
TransitionMap_Main = TransitionMap_Main.where((TransitionMap.gte(31)).and(TransitionMap.lte(33)), 30);
TransitionMap_Main = TransitionMap_Main.where((TransitionMap.gte(63)).and(TransitionMap.lte(64)), 30);
TransitionMap_Main = TransitionMap_Main.where((TransitionMap.gte(81)).and(TransitionMap.lte(86)), 41);
TransitionMap_Main = TransitionMap_Main.where((TransitionMap.gte(73)).and(TransitionMap.lte(74)), 42);
TransitionMap_Main = TransitionMap_Main.where((TransitionMap.gte(41)).and(TransitionMap.lte(42)), 43);
TransitionMap_Main = TransitionMap_Main.where((TransitionMap.gte(65)).and(TransitionMap.lte(66)), 43);
TransitionMap_Main = TransitionMap_Main.where((TransitionMap.gte(51)).and(TransitionMap.lte(54)), 50);
TransitionMap_Main = TransitionMap_Main.where((TransitionMap.eq(67)), 50);
TransitionMap_Main = TransitionMap_Main.where((TransitionMap.gte(71)).and(TransitionMap.lte(72)), 60);
TransitionMap_Main = TransitionMap_Main.where((TransitionMap.gte(91)), 70);

var TMF_Main_prj = TransitionMap_Main.reproject(ee.Projection('EPSG:4326'), null, 30);

var v20 = calculate_cover(TMF_Main_prj, 10, 'TMF', 1000); // Undisturbed Tropical Moist Forest (TMF)
var v21 = calculate_cover(TMF_Main_prj, 20, 'TMF', 1000); // Degraded TMF
var v22 = calculate_cover(TMF_Main_prj, 30, 'TMF', 1000); // TMF regrowth
var v23 = calculate_cover(TMF_Main_prj, 41, 'TMF', 1000); // Deforested land - Forest converted to tree plantations
var v24 = calculate_cover(TMF_Main_prj, 42, 'TMF', 1000); // Deforested Land - Forest converted to water
var v25 = calculate_cover(TMF_Main_prj, 43, 'TMF', 1000); // Deforested Land - Forest converted to other land cover
var v26 = calculate_cover(TMF_Main_prj, 50, 'TMF', 1000); // Recent deforestation or degradation (2018-2020)
var v27 = calculate_cover(TMF_Main_prj, 60, 'TMF', 1000); // Permanent or Seasonal Water
var v28 = calculate_cover(TMF_Main_prj, 70, 'TMF', 1000); // Other land cover (including afforestation)


//// Tropical Moist Forest: number of events
var TMF_intensity      = ee.ImageCollection('projects/JRC/TMF/v1_2020/Intensity').mosaic().reproject(ee.Projection('EPSG:4326'), null, 30); // Total number of disruption observations detected over the disturbed period (1982-2020) for all the areas classified as TMF change in the transition map.
var v29 = calculate_avg(TMF_intensity, 'Intensity',  'nr_forest_obs',    100);


//// Land use 2020 - ESA
var land_use = ee.ImageCollection("ESA/WorldCover/v100").median().reproject(ee.Projection('EPSG:4326'), null, 10);

var v30 = calculate_cover(land_use, 10,  'ESA_LU', 1000);  // Trees
var v31 = calculate_cover(land_use, 20,  'ESA_LU', 1000);  // Shrubland
var v32 = calculate_cover(land_use, 30,  'ESA_LU', 1000);  // Grassland
var v33 = calculate_cover(land_use, 40,  'ESA_LU', 1000);  // Cropland
var v34 = calculate_cover(land_use, 50,  'ESA_LU', 1000);  // Built-up
var v35 = calculate_cover(land_use, 60,  'ESA_LU', 1000);  // Barren / sparse vegetation
var v36 = calculate_cover(land_use, 70,  'ESA_LU', 1000);  // Snow and ice
var v37 = calculate_cover(land_use, 80,  'ESA_LU', 1000);  // Open water
var v38 = calculate_cover(land_use, 90,  'ESA_LU', 1000);  // Herbaceous wetland
var v39 = calculate_cover(land_use, 95,  'ESA_LU', 1000);  // Mangroves
var v40 = calculate_cover(land_use, 100, 'ESA_LU', 1000); // Moss and lichen


//// Hansen: Lossyear variables
var lossyear  = ee.Image('UMD/hansen/global_forest_change_2019_v1_7').select('lossyear');

var v41 = calculate_avg(lossyear.unmask(0),         'lossyear',  'AVG',       100);
var v42 = calculate_std(lossyear.unmask(0),         'lossyear',  'STD',       100);
var v43 = calculate_total_cover(lossyear,           'total_lost',             1000);


//// SRTM: elevation
var elevation = ee.Image('CGIAR/SRTM90_V4').select('elevation');

var v44 = calculate_avg(elevation, 'elevation', 'SRTM', 1);
var v45 = ee.Terrain.slope(v44).multiply(10).round().toInt16();
//export_img(v45, 'slope_SRTM', CB_prj);


//// Burns
var burns   = ee.ImageCollection("MODIS/006/MCD64A1");
var v46     = burns.select('BurnDate').count().float().unmask(0).rename('occurrences').reproject(ee.Projection(PROJ), null, 250).toInt16();
//export_img(v46, 'burns_occurences', CB_prj);


//// Built-up areas
var builtup = ee.Image("JRC/GHSL/P2016/BUILT_LDSMT_GLOBE_V1").select('cnfd').gt(10); // Threshold at 10 to include many areas that have only little builtup characteristics, but to exclude the most noisy data
var v47     = calculate_avg(builtup, 'cnfd', 'builtup250', 10000);

var v48    = v47.focalMean({ radius: 2, kernelType: 'circle', units: 'pixels'}).rename('cnfd_builtup1000').toInt16();
var v49    = v47.focalMean({ radius: 4, kernelType: 'circle', units: 'pixels'}).rename('cnfd_builtup2000').toInt16();
var v50    = v47.focalMean({ radius: 10, kernelType: 'circle', units: 'pixels'}).rename('cnfd_builtup5000').toInt16();

// var builtup_1000_temp = calculate_avg_res(builtup, 'cnfd', 'JRC', 1000, 10000);
// var v48      = calculate_avg(builtup_1000_temp, 'cnfd', 'builtup1000', 1);

// var builtup_2000_temp = calculate_avg_res(builtup, 'cnfd', 'JRC', 2000, 10000);
// var v49      = calculate_avg(builtup_2000_temp, 'cnfd', 'builtup2000', 1);

// var builtup_5000_temp = calculate_avg_res(builtup, 'cnfd', 'JRC', 5000, 10000);
// var v50      = calculate_avg(builtup_5000_temp, 'cnfd', 'builtup5000', 1);

    ///////////////
    //// STACK ////
    ///////////////

var stack  = v01.addBands(v02).addBands(v03).addBands(v04).addBands(v05)
  .addBands(v06).addBands(v07).addBands(v08).addBands(v09).addBands(v10)
  .addBands(v11).addBands(v12).addBands(v13).addBands(v14).addBands(v15)
  .addBands(v16).addBands(v17).addBands(v18).addBands(v19).addBands(v20)
  .addBands(v21).addBands(v22).addBands(v23).addBands(v24).addBands(v25)
  .addBands(v26).addBands(v27).addBands(v28).addBands(v29).addBands(v30)
  .addBands(v31).addBands(v32).addBands(v33).addBands(v34).addBands(v35)
  .addBands(v36).addBands(v37).addBands(v38).addBands(v39).addBands(v40)
  .addBands(v41).addBands(v42).addBands(v43).addBands(v44).addBands(v45)
  .addBands(v46).addBands(v47).addBands(v48).addBands(v49).addBands(v50);

var stack_29  = stack.select(
'bio01_Worldclim','bio04_Worldclim','bio07_Worldclim','bio12_Worldclim','bio13_Worldclim','bio14_Worldclim',
'TMF_10','TMF_20','TMF_30','TMF_41','TMF_43','TMF_50',
'Intensity_nr_forest_obs',
'ESA_LU_10','ESA_LU_20','ESA_LU_30','ESA_LU_40','ESA_LU_50','ESA_LU_60','ESA_LU_80','ESA_LU_90','ESA_LU_95',
'lossyear_STD','total_lost','elevation_SRTM','slope',
'cnfd_builtup250','cnfd_builtup1000','cnfd_builtup5000'
);


var model_area      = ee.FeatureCollection("users/BasBoek90/model_area");
var mini_model_area = ee.FeatureCollection("users/BasBoek90/mini_model_area");
var CB_split        = ee.FeatureCollection("users/BasBoek90/CB_Split_13_chunks");

export_img(stack_29, 'CB_29preds_model_area',      model_area);
export_img(stack_29, 'CB_29preds_mini_model_area', mini_model_area);

export_img(stack.select( 0, 1, 2, 3, 4, 5, 6, 7, 8, 9), 'CB_preds_01_10', CB_prj);
export_img(stack.select(10,11,12,13,14,15,16,17,18,19), 'CB_preds_11_20', CB_prj);
export_img(stack.select(20,21,22,23,24,25,26,27,28,29), 'CB_preds_21_30', CB_prj);
export_img(stack.select(30,31,32,33,34,35,36,37,38,39), 'CB_preds_31_40', CB_prj);
export_img(stack.select(40,41,42,43,44,45,46,47,48,49), 'CB_preds_41_50', CB_prj);
export_img(stack, 'CB_50preds_CAR1',  CB_split.filter("AOI == 'CAR1'"));
export_img(stack, 'CB_50preds_CAR2',  CB_split.filter("AOI == 'CAR2'"));
export_img(stack, 'CB_50preds_CMR1',  CB_split.filter("AOI == 'CMR1'"));
export_img(stack, 'CB_50preds_CMR2',  CB_split.filter("AOI == 'CMR2'"));
export_img(stack, 'CB_50preds_DRC1',  CB_split.filter("AOI == 'DRC1'"));
export_img(stack, 'CB_50preds_DRC2',  CB_split.filter("AOI == 'DRC2'"));
export_img(stack, 'CB_50preds_DRC3',  CB_split.filter("AOI == 'DRC3'"));
export_img(stack, 'CB_50preds_DRC4',  CB_split.filter("AOI == 'DRC4'"));
export_img(stack, 'CB_50preds_DRC5',  CB_split.filter("AOI == 'DRC5'"));
export_img(stack, 'CB_50preds_DRC6',  CB_split.filter("AOI == 'DRC6'"));
export_img(stack, 'CB_50preds_DRC7',  CB_split.filter("AOI == 'DRC7'"));
export_img(stack, 'CB_50preds_GAB',   CB_split.filter("AOI == 'GAB'"));
export_img(stack, 'CB_50preds_ROC',   CB_split.filter("AOI == 'ROC'"));
export_img(stack_29, 'CB_29preds_CAR1',  CB_split.filter("AOI == 'CAR1'"));
export_img(stack_29, 'CB_29preds_CAR2',  CB_split.filter("AOI == 'CAR2'"));
export_img(stack_29, 'CB_29preds_CMR1',  CB_split.filter("AOI == 'CMR1'"));
export_img(stack_29, 'CB_29preds_CMR2',  CB_split.filter("AOI == 'CMR2'"));
export_img(stack_29, 'CB_29preds_DRC1',  CB_split.filter("AOI == 'DRC1'"));
export_img(stack_29, 'CB_29preds_DRC2',  CB_split.filter("AOI == 'DRC2'"));
export_img(stack_29, 'CB_29preds_DRC3',  CB_split.filter("AOI == 'DRC3'"));
export_img(stack_29, 'CB_29preds_DRC4',  CB_split.filter("AOI == 'DRC4'"));
export_img(stack_29, 'CB_29preds_DRC5',  CB_split.filter("AOI == 'DRC5'"));
export_img(stack_29, 'CB_29preds_DRC6',  CB_split.filter("AOI == 'DRC6'"));
export_img(stack_29, 'CB_29preds_DRC7',  CB_split.filter("AOI == 'DRC7'"));
export_img(stack_29, 'CB_29preds_GAB',   CB_split.filter("AOI == 'GAB'"));
export_img(stack_29, 'CB_29preds_ROC',   CB_split.filter("AOI == 'ROC'"));


